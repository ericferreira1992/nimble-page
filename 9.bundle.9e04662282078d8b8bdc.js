(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{16:function(e,t,n){"use strict";n.r(t),n.d(t,"Framework1xFormsPage",(function(){return m}));var o,r=n(1),s=n(4),l=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=function(e,t,n,o){var r,s=arguments.length,l=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(s<3?r(l):s>3?r(t,n,l):r(t,n))||l);return s>3&&l&&Object.defineProperty(t,n,l),l},i=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},m=function(e){function t(t){var n=e.call(this)||this;return n.lang=t,n.loginForm=new r.e({username:{value:"",validators:[r.p.required]},password:{value:"",validators:[r.p.required]}}),n}return l(t,e),t.prototype.getText=function(e){return this.lang.get("DOC.1x.CONTENT.FRAMEWORK.FORMS."+e)},t.prototype.onInit=function(){},t.prototype.onSubmit=function(){this.loginForm.isValid&&alert(this.getText("VALIDATE_FORM.CREATE.TEXT_2"))},t.prototype.onDestroy=function(){},t=a([Object(r.m)({template:n(79),style:n(80),title:"Reactive Forms / Document - Nimble"}),i("design:paramtypes",[s.a])],t)}(r.k)},79:function(e,t){e.exports='<div class=framework-1x-forms-page> <h1> {{getText(\'TITLE\')}} </h1> <p class="text-justify mt-2"> {{getText(\'TEXT\')}} </p> <section class=mb-1> <h4> <a href=#structure name=structure> {{getText(\'STRUCTURE.TITLE\')}} </a> </h4> <p [html]="getText(\'STRUCTURE.TEXT\')"></p> <section class=pt-2> <h5 class="border-0 mt-4 mb-0" [html]="getText(\'STRUCTURE.FORM.TITLE\')"></h5> <p [html]="getText(\'STRUCTURE.FORM.TEXT\')"></p> <pre>\n                <code class=typescript>\nexport class Form {\n\n    // Observer para escutar quando o formulário for submetido\n    public onSubmit: Observer&lt;Event&gt;\n\n    // Os form-fields do formulário\n    public get fields(): { [field: string]: FormField }\n\n    // Indica se o formulário está blurred (entrou e saiu de algum campo)\n    public get blurred(): boolean\n\n    // Indica se o formulário está touched (algum campo foi tocado)\n    public get touched(): boolean\n\n    // Verifica se o formulário está todo válido\n    public get isValid(): boolean\n\n    // Retorna os erros que o formulário possui\n    public get errors(): { [name: string]: any } | null;\n\n    // Formulário em formato de objeto com todas as propriedades com seus valores\n    public value: { [name: string]: any }\n\n    // Retorna um form-field pelo nome\n    public get(fieldName: string): FormField;\n\n    // Verifica se existe um campo específico no formulário\n    public has(fieldName: string): boolean\n\n    // Verifica se possui erros\n    public hasErrors(): boolean\n\n    // Reseta os valores de todos os campos do formulário e também as propriedades touched e blurred\n    public reset(options?: { noNotify?: boolean, noUpdateElement?: boolean }): void\n\n    // Valida todo o formulário e retorna um boolean do resultado\n    public validate(): boolean\n\n    // Define o formulário inteiro como touched\n    public setTouched(): void\n\n    // Define o formulário inteiro como untouched\n    public setUntouched(): void\n\n    // Define o formulário inteiro como blurred\n    public setBlurred(): void\n\n    // Define o formulário inteiro como unblurred\n    public setUnblurred(): void\n\n}\n                </code>\n            </pre> </section> <section class=mt-3> <h5 class="border-0 mb-0" [html]="getText(\'STRUCTURE.FORM_FIELD.TITLE\')"></h5> <p [html]="getText(\'STRUCTURE.FORM_FIELD.TEXT\')"></p> <pre>\n                <code class=typescript>\nexport class FormFieldPrepare {\n\n    // Valor inicial do campo\n    public value: string | number | boolean | null | undefined;\n\n    // Lista de validadores: (opcional)\n    public validators?: ((formField: FormField) => any)[];\n\n}\n                </code>\n            </pre> </section> </section> <section class=mb-1> <h4> <a href=#start-use name=start-use> {{getText(\'START_USE.TITLE\')}} </a> </h4> <p [html]="getText(\'START_USE.TEXT\')"></p> <section class="mt-4 mb-1"> <h5 class="border-0 mb-0"> 01 - {{getText(\'START_USE.CREATE.TITLE\')}} </h5> <p [html]="getText(\'START_USE.CREATE.TEXT_1\')"></p> <p class=mt-2 [html]="getText(\'START_USE.CREATE.TEXT_2\')"></p> <pre>\n                <code class=typescript>\n@PreparePage({\n    template: require(\'./login.page.html\'),\n    style: require(\'./login.page.scss\')\n})\nexport class LoginPage extends Page {\n\n    public loginForm: Form;\n\n    constructor() {\n        super();\n        this.loginForm = new Form({\n            username: { value: \'\' },\n            password: { value: \'\' },\n        });\n    }\n}\n                </code>\n            </pre> </section> <section class="mt-3 mb-1"> <h5 class="border-0 mb-0" [html]="\'02 - \' + getText(\'START_USE.TEMPLATE.TITLE\')"></h5> <p [html]="getText(\'START_USE.TEMPLATE.TEXT_1\')"></p> <p class=mt-2> ❯ <span [html]="getText(\'START_USE.TEMPLATE.TEXT_2\')"></span> </p> <p class=mt-1> ❯ <span [html]="getText(\'START_USE.TEMPLATE.TEXT_3\')"></span> </p> <p class=mt-2 [html]="getText(\'START_USE.TEMPLATE.TEXT_4\')"></p> <pre>\n                <code class=html>\n&lt;div class="login-page"&gt;\n    &lt;form [form]="loginForm"&gt;\n        &lt;div class="form-group"&gt;\n            &lt;label&gt;Username&lt;/label&gt;\n            &lt;input class="form-control" form-field-name="username" type="text" /&gt;\n        &lt;/div&gt;\n\n        &lt;div class="form-group"&gt;\n            &lt;label&gt;Password&lt;/label&gt;\n            &lt;input class="form-control" form-field-name="password" type="password" /&gt;\n        &lt;/div&gt;\n\n        &lt;button type="submit"&gt;\n            ENTER\n        &lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n                </code>\n            </pre> </section> <section class=mt-3> <h5 class="border-0 mb-0" [html]="\'03 - \' + getText(\'START_USE.SUBMIT.TITLE\')"></h5> <p [html]="getText(\'START_USE.SUBMIT.TEXT\')"></p> <pre>\n                <code class=typescript>\n@PreparePage({\n    template: require(\'./login.page.html\'),\n    style: require(\'./login.page.scss\')\n})\nexport class LoginPage extends Page {\n\n    public loginForm: Form;\n\n    constructor() {\n        super();\n        this.loginForm = new Form({\n            username: { value: \'\' },\n            password: { value: \'\' },\n        });\n    }\n\n    public onSubmit() {\n        let formValue = this.loginForm.value;\n        console.log(formValue);\n        // Console result: { username: \'\', password: \'\' }\n    }\n}\n                </code>\n            </pre> <pre>\n                <code class=html>\n&lt;div class="login-page" (submit)="onSubmit()"&gt;\n    &lt;form [form]="loginForm"&gt;\n        &lt;div class="form-group"&gt;\n            &lt;label&gt;Username&lt;/label&gt;\n            &lt;input class="form-control" form-field-name="username" type="text" /&gt;\n        &lt;/div&gt;\n\n        &lt;div class="form-group"&gt;\n            &lt;label&gt;Password&lt;/label&gt;\n            &lt;input class="form-control" form-field-name="password" type="password" /&gt;\n        &lt;/div&gt;\n\n        &lt;button type="submit"&gt;\n            ENTER\n        &lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n                </code>\n            </pre> </section> </section> <section class=mb-1> <h4> <a href=#validate-form name=validate-form> {{getText(\'VALIDATE_FORM.TITLE\')}} </a> </h4> <p [html]="getText(\'VALIDATE_FORM.TEXT\')"></p> <section class="mt-4 mb-1"> <h5 class="border-0 mb-0"> 01 - {{getText(\'VALIDATE_FORM.CREATE.TITLE\')}} </h5> <p [html]="getText(\'VALIDATE_FORM.CREATE.TEXT_1\')"></p> <pre>\n                <code class=typescript>\nimport { Page, PreparePage, Form, Validators } from \'@nimble-ts/core\';\n\n@PreparePage({\n    template: require(\'./login.page.html\'),\n    style: require(\'./login.page.scss\')\n})\nexport class LoginPage extends Page {\n\n    public loginForm: Form;\n\n    constructor() {\n        super();\n        this.loginForm = new Form({\n            username: { value: \'\', validators: [ Validators.required ] },\n            password: { value: \'\', validators: [ Validators.required ] },\n        });\n    }\n\n    public onSubmit() {\n        if (this.loginForm.isValid) {\n            alert(\'{{getText(\'VALIDATE_FORM.CREATE.TEXT_2\')}}\');\n        }\n    }\n}\n                </code>\n            </pre> </section> <section class="mt-3 mb-1"> <h5 class="border-0 mb-0" [html]="\'02 - \' + getText(\'START_USE.TEMPLATE.TITLE\')"></h5> <p [html]="getText(\'VALIDATE_FORM.TEMPLATE.TEXT\')"></p> <pre>\n                <code class=html>\n&lt;div class="login-page"&gt;\n    &lt;form [form]="loginForm" (submit)="onSubmit()"&gt;\n        &lt;div class="form-group"&gt;\n            &lt;label&gt;Username&lt;/label&gt;\n            &lt;input class="form-control" [class]="{ \'is-invalid\': loginForm.get(\'username\').hasErrors() }" form-field-name="username" type="text"/&gt;\n            &lt;p @if="loginForm.get(\'username\').hasError(\'required\')" class="invalid-feedback"&gt;\n                {{lang.get(\'GLOBAL.REQUIRED_FIELD\')}}\n            &lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class="form-group"&gt;\n            &lt;label&gt;Password&lt;/label&gt;\n            &lt;input class="form-control" [class]="{ \'is-invalid\': loginForm.get(\'password\').hasErrors() }" form-field-name="password" type="password"/&gt;\n            &lt;p @if="loginForm.get(\'password\').hasError(\'required\')" class="invalid-feedback"&gt;\n                {{lang.get(\'GLOBAL.REQUIRED_FIELD\')}}\n            &lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;button type="submit"&gt;\n            ENTER\n        &lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n                </code>\n            </pre> </section> <section class="mt-3 mb-1"> <h5 class="border-0 mb-0" [html]="\'03 - \' + getText(\'VALIDATE_FORM.RESULT.TITLE\')"></h5> <p [html]="getText(\'VALIDATE_FORM.RESULT.TEXT\')"></p> <div class="browser-template mt-3"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/login</span> </div> </header> <section> <form [form]=loginForm (submit)=onSubmit() [style]="{ \'max-width\': \'200px\' }"> <div class=form-group> <small>Username</small> <input class=form-control [class]="{ \'is-invalid\': loginForm.get(\'username\').hasErrors() }" form-field-name=username type=text /> <p @if="loginForm.get(\'username\').hasError(\'required\')" class=text-danger> {{lang.get(\'GLOBAL.REQUIRED_FIELD\')}} </p> </div> <div class=form-group> <small>Password</small> <input class=form-control [class]="{ \'is-invalid\': loginForm.get(\'password\').hasErrors() }" form-field-name=password type=password /> <p @if="loginForm.get(\'password\').hasError(\'required\')" class=text-danger> {{lang.get(\'GLOBAL.REQUIRED_FIELD\')}} </p> </div> <button type=submit class=w-100> <span>ENTER</span> </button> </form> </section> </div> </section> </section> </div>'},80:function(e,t,n){}}]);