(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{16:function(e,r,t){"use strict";t.r(r),t.d(r,"Framework1xFormsPage",(function(){return m}));var s,o=t(1),a=t(4),l=(s=function(e,r){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)r.hasOwnProperty(t)&&(e[t]=r[t])})(e,r)},function(e,r){function t(){this.constructor=e}s(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)}),n=function(e,r,t,s){var o,a=arguments.length,l=a<3?r:null===s?s=Object.getOwnPropertyDescriptor(r,t):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,r,t,s);else for(var n=e.length-1;n>=0;n--)(o=e[n])&&(l=(a<3?o(l):a>3?o(r,t,l):o(r,t))||l);return a>3&&l&&Object.defineProperty(r,t,l),l},i=function(e,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,r)},m=function(e){function r(r){var t=e.call(this)||this;return t.lang=r,t.loginForm=new o.f({username:{value:"",validators:[o.p.required]},password:{value:"",validators:[o.p.required]}}),t.validatorsForm=new o.f({required:{value:"",validators:[o.p.required]},requiredTrue:{value:!1,validators:[o.p.requiredTrue]},min:{value:null,validators:[o.p.min(1)]},max:{value:null,validators:[o.p.max(10)]},minLength:{value:null,validators:[o.p.minLength(10)]},maxLength:{value:null,validators:[o.p.maxLength(40)]},minChecked:{value:[],validators:[o.p.minChecked(2)]},maxChecked:{value:[],validators:[o.p.maxChecked(3)]},email:{value:null,validators:[o.p.email]},pattern:{value:"",validators:[o.p.pattern("^[A-zÀ-ú\\s]*$")]}}),t.customValidatorsForm=new o.f({pass:{value:"",validators:[o.p.required,t.formFieldEquals("confirmPass")]},confirmPass:{value:"",validators:[o.p.required]}}),t}return l(r,e),r.prototype.formFieldEquals=function(e){return function(r){var t,s,o=null==r?void 0:r.value,a=null===(s=null===(t=null==r?void 0:r.parent)||void 0===t?void 0:t.get(e))||void 0===s?void 0:s.value;return{equals:!(!o||!a)&&o!==a}}},r.prototype.getText=function(e){return this.lang.get("DOC.1x.CONTENT.FRAMEWORK.FORMS."+e)},r.prototype.onInit=function(){},r.prototype.onSubmit=function(){this.loginForm.isValid&&alert(this.getText("VALIDATE_FORM.CREATE.TEXT_2"))},r.prototype.onDestroy=function(){},r=n([Object(o.m)({template:t(79),style:t(80),title:"Reactive Forms / Document - Nimble"}),i("design:paramtypes",[a.a])],r)}(o.k)},79:function(e,r){e.exports="<div class=framework-1x-forms-page> <h1> {{getText('TITLE')}} </h1> <p class=\"text-justify mt-2\"> {{getText('TEXT')}} </p> <section class=mb-1> <h4> <a href=#structure name=structure> {{getText('STRUCTURE.TITLE')}} </a> </h4> <p [html]=\"getText('STRUCTURE.TEXT')\"></p> <section class=pt-2> <h5 class=\"border-0 mt-4 mb-0\" [html]=\"getText('STRUCTURE.FORM.TITLE')\"></h5> <p [html]=\"getText('STRUCTURE.FORM.TEXT')\"></p> <pre>\n                <code class=typescript>\nexport class Form {\n\n    // Observer para escutar quando o formulário for submetido\n    public onSubmit: Observer&lt;Event&gt;\n\n    // Os form-fields do formulário\n    public get fields(): { [field: string]: FormField }\n\n    // Indica se o formulário está blurred (entrou e saiu de algum campo)\n    public get blurred(): boolean\n\n    // Indica se o formulário está touched (algum campo foi tocado)\n    public get touched(): boolean\n\n    // Verifica se o formulário está todo válido\n    public get isValid(): boolean\n\n    // Retorna os erros que o formulário possui\n    public get errors(): { [name: string]: any } | null;\n\n    // Formulário em formato de objeto com todas as propriedades com seus valores\n    public value: { [name: string]: any }\n\n    // Retorna um form-field pelo nome\n    public get(fieldName: string): FormField;\n\n    // Verifica se existe um campo específico no formulário\n    public has(fieldName: string): boolean\n\n    // Verifica se possui erros\n    public hasErrors(): boolean\n\n    // Reseta os valores de todos os campos do formulário e também as propriedades touched e blurred\n    public reset(options?: { noNotify?: boolean, noUpdateElement?: boolean }): void\n\n    // Valida todo o formulário e retorna um boolean do resultado\n    public validate(): boolean\n\n    // Define o formulário inteiro como touched\n    public setTouched(): void\n\n    // Define o formulário inteiro como untouched\n    public setUntouched(): void\n\n    // Define o formulário inteiro como blurred\n    public setBlurred(): void\n\n    // Define o formulário inteiro como unblurred\n    public setUnblurred(): void\n\n}\n                </code>\n            </pre> </section> <section class=mt-3> <h5 class=\"border-0 mb-0\" [html]=\"getText('STRUCTURE.FORM_FIELD.TITLE')\"></h5> <p [html]=\"getText('STRUCTURE.FORM_FIELD.TEXT')\"></p> <pre>\n                <code class=typescript>\nexport class FormFieldPrepare {\n\n    // Valor inicial do campo\n    public value: string | number | boolean | null | undefined;\n\n    // Lista de validadores: (opcional)\n    public validators?: ((formField: FormField) => any)[];\n\n}\n                </code>\n            </pre> </section> </section> <section class=mb-1> <h4> <a href=#start-use name=start-use> {{getText('START_USE.TITLE')}} </a> </h4> <p [html]=\"getText('START_USE.TEXT')\"></p> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0\"> 01 - {{getText('START_USE.CREATE.TITLE')}} </h5> <p [html]=\"getText('START_USE.CREATE.TEXT_1')\"></p> <p class=mt-2 [html]=\"getText('START_USE.CREATE.TEXT_2')\"></p> <pre>\n                <code class=typescript>\n@PreparePage({\n    template: require('./login.page.html'),\n    style: require('./login.page.scss')\n})\nexport class LoginPage extends Page {\n\n    public loginForm: Form;\n\n    constructor() {\n        super();\n        this.loginForm = new Form({\n            username: { value: '' },\n            password: { value: '' },\n        });\n    }\n}\n                </code>\n            </pre> </section> <section class=\"mt-3 mb-1\"> <h5 class=\"border-0 mb-0\" [html]=\"'02 - ' + getText('START_USE.TEMPLATE.TITLE')\"></h5> <p [html]=\"getText('START_USE.TEMPLATE.TEXT_1')\"></p> <p class=mt-2> ❯ <span [html]=\"getText('START_USE.TEMPLATE.TEXT_2')\"></span> </p> <p class=mt-1> ❯ <span [html]=\"getText('START_USE.TEMPLATE.TEXT_3')\"></span> </p> <p class=mt-2 [html]=\"getText('START_USE.TEMPLATE.TEXT_4')\"></p> <pre>\n                <code class=html>\n&lt;div class=\"login-page\"&gt;\n    &lt;form [form]=\"loginForm\"&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label&gt;Username&lt;/label&gt;\n            &lt;input class=\"form-control\" form-field-name=\"username\" type=\"text\" /&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"form-group\"&gt;\n            &lt;label&gt;Password&lt;/label&gt;\n            &lt;input class=\"form-control\" form-field-name=\"password\" type=\"password\" /&gt;\n        &lt;/div&gt;\n\n        &lt;button type=\"submit\"&gt;\n            ENTER\n        &lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n                </code>\n            </pre> </section> <section class=mt-3> <h5 class=\"border-0 mb-0\" [html]=\"'03 - ' + getText('START_USE.SUBMIT.TITLE')\"></h5> <p [html]=\"getText('START_USE.SUBMIT.TEXT')\"></p> <pre>\n                <code class=typescript>\n@PreparePage({\n    template: require('./login.page.html'),\n    style: require('./login.page.scss')\n})\nexport class LoginPage extends Page {\n\n    public loginForm: Form;\n\n    constructor() {\n        super();\n        this.loginForm = new Form({\n            username: { value: '' },\n            password: { value: '' },\n        });\n    }\n\n    public onSubmit() {\n        let formValue = this.loginForm.value;\n        console.log(formValue);\n        // Console result: { username: '', password: '' }\n    }\n}\n                </code>\n            </pre> <pre>\n                <code class=html>\n&lt;div class=\"login-page\" (submit)=\"onSubmit()\"&gt;\n    &lt;form [form]=\"loginForm\"&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label&gt;Username&lt;/label&gt;\n            &lt;input class=\"form-control\" form-field-name=\"username\" type=\"text\" /&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"form-group\"&gt;\n            &lt;label&gt;Password&lt;/label&gt;\n            &lt;input class=\"form-control\" form-field-name=\"password\" type=\"password\" /&gt;\n        &lt;/div&gt;\n\n        &lt;button type=\"submit\"&gt;\n            ENTER\n        &lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n                </code>\n            </pre> </section> </section> <section class=mb-1> <h4> <a href=#validate-form name=validate-form> {{getText('VALIDATE_FORM.TITLE')}} </a> </h4> <p [html]=\"getText('VALIDATE_FORM.TEXT')\"></p> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0\"> 01 - {{getText('VALIDATE_FORM.CREATE.TITLE')}} </h5> <p [html]=\"getText('VALIDATE_FORM.CREATE.TEXT_1')\"></p> <pre>\n                <code class=typescript>\nimport { Page, PreparePage, Form, Validators } from '@nimble-ts/core';\n\n@PreparePage({\n    template: require('./login.page.html'),\n    style: require('./login.page.scss')\n})\nexport class LoginPage extends Page {\n\n    public loginForm: Form;\n\n    constructor() {\n        super();\n        this.loginForm = new Form({\n            username: { value: '', validators: [ Validators.required ] },\n            password: { value: '', validators: [ Validators.required ] },\n        });\n    }\n\n    public onSubmit() {\n        if (this.loginForm.isValid) {\n            alert('{{getText('VALIDATE_FORM.CREATE.TEXT_2')}}');\n        }\n    }\n}\n                </code>\n            </pre> </section> <section class=\"mt-3 mb-1\"> <h5 class=\"border-0 mb-0\" [html]=\"'02 - ' + getText('START_USE.TEMPLATE.TITLE')\"></h5> <p [html]=\"getText('VALIDATE_FORM.TEMPLATE.TEXT')\"></p> <pre>\n                <code class=html>\n&lt;div class=\"login-page\"&gt;\n    &lt;form [form]=\"loginForm\" (submit)=\"onSubmit()\"&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label&gt;Username&lt;/label&gt;\n            &lt;input class=\"form-control\" [class]=\"{ 'is-invalid': loginForm.get('username').hasErrors() }\" form-field-name=\"username\" type=\"text\"/&gt;\n            &lt;p @if=\"loginForm.get('username').hasError('required')\" class=\"invalid-feedback\"&gt;\n                {{lang.get('GLOBAL.REQUIRED_FIELD')}}\n            &lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"form-group\"&gt;\n            &lt;label&gt;Password&lt;/label&gt;\n            &lt;input class=\"form-control\" [class]=\"{ 'is-invalid': loginForm.get('password').hasErrors() }\" form-field-name=\"password\" type=\"password\"/&gt;\n            &lt;p @if=\"loginForm.get('password').hasError('required')\" class=\"invalid-feedback\"&gt;\n                {{lang.get('GLOBAL.REQUIRED_FIELD')}}\n            &lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;button type=\"submit\"&gt;\n            ENTER\n        &lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n                </code>\n            </pre> </section> <section class=\"mt-3 mb-1\"> <h5 class=\"border-0 mb-0\" [html]=\"'03 - ' + getText('VALIDATE_FORM.RESULT.TITLE')\"></h5> <p [html]=\"getText('VALIDATE_FORM.RESULT.TEXT')\"></p> <div class=\"browser-template mt-3\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/login</span> </div> </header> <section> <form [form]=loginForm (submit)=onSubmit() [style]=\"{ 'max-width': '200px' }\"> <div class=form-group> <small>Username</small> <input class=form-control [class]=\"{ 'is-invalid': loginForm.get('username').hasErrors() }\" form-field-name=username type=text /> <p @if=\"loginForm.get('username').hasError('required')\" class=text-danger> {{lang.get('GLOBAL.REQUIRED_FIELD')}} </p> </div> <div class=form-group> <small>Password</small> <input class=form-control [class]=\"{ 'is-invalid': loginForm.get('password').hasErrors() }\" form-field-name=password type=password /> <p @if=\"loginForm.get('password').hasError('required')\" class=text-danger> {{lang.get('GLOBAL.REQUIRED_FIELD')}} </p> </div> <button type=submit class=w-100> <span>ENTER</span> </button> </form> </section> </div> </section> </section> <section class=mb-1> <h4> <a href=#validators name=validators> {{getText('VALIDATORS.TITLE')}} </a> </h4> <p [html]=\"getText('VALIDATORS.TEXT')\"></p> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0 pb-2\"> <code><span class=font-weight-regular>Validators.</span><strong>required</strong></code> </h5> <p> <strong>{{getText('VALIDATORS.DESCRIPTION')}}</strong> {{getText('VALIDATORS.REQUIRED.TEXT')}} </p> <p> <strong>{{getText('VALIDATORS.EXAMPLE')}}</strong> </p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    username: { value: '', validators: [Validators.required] }\n});\n                </code>\n            </pre> <div class=\"browser-template mb-5\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/form-example</span> </div> </header> <section> <form [form]=validatorsForm> <div class=\"form-group mb-2\" [style]=\"{ 'max-width': '200px' }\"> <small>Username</small> <input class=form-control [class]=\"{ 'is-invalid': validatorsForm.get('required').hasErrors() }\" form-field-name=required type=text /> </div> <small @if=\"validatorsForm.get('required').touched || validatorsForm.get('required').hasErrors()\"> <span class=font-weight-bold>form.get('username').errors</span>: {{JSON.stringify(validatorsForm.get('required').errors)}} </small> </form> </section> </div> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0 pb-2\"> <code><span class=font-weight-regular>Validators.</span><strong>requiredTrue</strong></code> </h5> <p> <strong>{{getText('VALIDATORS.DESCRIPTION')}}</strong> {{getText('VALIDATORS.REQUIRED_TRUE.TEXT')}} </p> <p> <strong>{{getText('VALIDATORS.EXAMPLE')}}</strong> </p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    terms: { value: false, validators: [Validators.requiredTrue] }\n});\n                </code>\n            </pre> <div class=\"browser-template mb-5\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/form-example</span> </div> </header> <section> <form [form]=validatorsForm> <div class=\"form-group form-check mb-1\" [style]=\"{ 'max-width': '200px' }\"> <input type=checkbox form-field-name=requiredTrue id=requiredTrue class=\"form-check-input cursor-pointer\"> <label for=requiredTrue class=\"form-check-label cursor-pointer\"><small>I accept terms.</small></label> </div> <small @if=\"validatorsForm.get('requiredTrue').touched || validatorsForm.get('requiredTrue').hasErrors()\"> <span class=font-weight-bold>form.get('terms').errors</span>: {{JSON.stringify(validatorsForm.get('requiredTrue').errors)}} </small> </form> </section> </div> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0 pb-2\"> <code><span class=font-weight-regular>Validators.</span><strong>min</strong></code> </h5> <p> <strong>{{getText('VALIDATORS.DESCRIPTION')}}</strong> {{getText('VALIDATORS.MIN.TEXT')}} </p> <p> <strong>{{getText('VALIDATORS.EXAMPLE')}}</strong> </p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    quantity: { value: null, validators: [Validators.min(1)] }\n});\n                </code>\n            </pre> <div class=\"browser-template mb-5\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/form-example</span> </div> </header> <section> <form [form]=validatorsForm> <div class=\"form-group mb-2\" [style]=\"{ 'max-width': '200px' }\"> <small>Quantity</small> <input class=form-control [class]=\"{ 'is-invalid': validatorsForm.get('min').hasErrors() }\" form-field-name=min type=number /> </div> <small @if=\"validatorsForm.get('min').touched || validatorsForm.get('min').hasErrors()\"> <span class=font-weight-bold>form.get('quantity').errors</span>: {{JSON.stringify(validatorsForm.get('min').errors)}} </small> </form> </section> </div> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0 pb-2\"> <code><span class=font-weight-regular>Validators.</span><strong>max</strong></code> </h5> <p> <strong>{{getText('VALIDATORS.DESCRIPTION')}}</strong> {{getText('VALIDATORS.MAX.TEXT')}} </p> <p> <strong>{{getText('VALIDATORS.EXAMPLE')}}</strong> </p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    quantity: { value: null, validators: [Validators.max(10)] }\n});\n                </code>\n            </pre> <div class=\"browser-template mb-5\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/form-example</span> </div> </header> <section> <form [form]=validatorsForm> <div class=\"form-group mb-2\" [style]=\"{ 'max-width': '200px' }\"> <small>Quantity</small> <input class=form-control [class]=\"{ 'is-invalid': validatorsForm.get('max').hasErrors() }\" form-field-name=max type=number /> </div> <small @if=\"validatorsForm.get('max').touched || validatorsForm.get('max').hasErrors()\"> <span class=font-weight-bold>form.get('quantity').errors</span>: {{JSON.stringify(validatorsForm.get('max').errors)}} </small> </form> </section> </div> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0 pb-2\"> <code><span class=font-weight-regular>Validators.</span><strong>minLength</strong></code> </h5> <p> <strong>{{getText('VALIDATORS.DESCRIPTION')}}</strong> {{getText('VALIDATORS.MIN_LENGTH.TEXT')}} </p> <p> <strong>{{getText('VALIDATORS.EXAMPLE')}}</strong> </p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    description: { value: '', validators: [Validators.minLength(10)] }\n});\n                </code>\n            </pre> <div class=\"browser-template mb-5\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/form-example</span> </div> </header> <section> <form [form]=validatorsForm> <div class=\"form-group mb-2\"> <small>Description</small> <textarea class=form-control [style]=\"{ 'max-width': '250px', 'max-height': '130px', 'min-height': '40px' }\" [class]=\"{ 'is-invalid': validatorsForm.get('minLength').hasErrors() }\" form-field-name=minLength>\n                            </textarea> </div> <small @if=\"validatorsForm.get('minLength').touched || validatorsForm.get('minLength').hasErrors()\"> <span class=font-weight-bold>form.get('description').errors</span>: {{JSON.stringify(validatorsForm.get('minLength').errors)}} </small> </form> </section> </div> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0 pb-2\"> <code><span class=font-weight-regular>Validators.</span><strong>maxLength</strong></code> </h5> <p> <strong>{{getText('VALIDATORS.DESCRIPTION')}}</strong> {{getText('VALIDATORS.MAX_LENGTH.TEXT')}} </p> <p> <strong>{{getText('VALIDATORS.EXAMPLE')}}</strong> </p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    description: { value: '', validators: [Validators.maxLength(40)] }\n});\n                </code>\n            </pre> <div class=\"browser-template mb-5\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/form-example</span> </div> </header> <section> <form [form]=validatorsForm> <div class=\"form-group mb-2\"> <small>Description</small> <textarea class=form-control [style]=\"{ 'max-width': '250px', 'max-height': '130px', 'min-height': '40px' }\" [class]=\"{ 'is-invalid': validatorsForm.get('maxLength').hasErrors() }\" form-field-name=maxLength>\n                            </textarea> </div> <small @if=\"validatorsForm.get('maxLength').touched || validatorsForm.get('maxLength').hasErrors()\"> <span class=font-weight-bold>form.get('description').errors</span>: {{JSON.stringify(validatorsForm.get('maxLength').errors)}} </small> </form> </section> </div> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0 pb-2\"> <code><span class=font-weight-regular>Validators.</span><strong>minChecked</strong></code> </h5> <p> <strong>{{getText('VALIDATORS.DESCRIPTION')}}</strong> {{getText('VALIDATORS.MIN_CHECKED.TEXT')}} </p> <p> <strong>{{getText('VALIDATORS.EXAMPLE')}}</strong> </p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    fruits: { value: [], validators: [Validators.minChecked(2)] }\n});\n                </code>\n            </pre> <div class=\"browser-template mb-5\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/form-example</span> </div> </header> <section> <form [form]=validatorsForm> <div class=\"form-group form-check mb-1\" [style]=\"{ 'max-width': '200px' }\"> <input type=checkbox form-field-name=minChecked value=banana class=\"form-check-input cursor-pointer\" id=minChecked_1> <label for=minChecked_1 class=\"form-check-label cursor-pointer\">Banana</label> </div> <div class=\"form-group form-check mb-1\" [style]=\"{ 'max-width': '200px' }\"> <input type=checkbox form-field-name=minChecked value=pear class=\"form-check-input cursor-pointer\" id=minChecked_2> <label for=minChecked_2 class=\"form-check-label cursor-pointer\">Pear</label> </div> <div class=\"form-group form-check mb-1\" [style]=\"{ 'max-width': '200px' }\"> <input type=checkbox form-field-name=minChecked value=kiwi class=\"form-check-input cursor-pointer\" id=minChecked_3> <label for=minChecked_3 class=\"form-check-label cursor-pointer\">Kiwi</label> </div> <div class=\"form-group form-check mb-1\" [style]=\"{ 'max-width': '200px' }\"> <input type=checkbox form-field-name=minChecked value=orange class=\"form-check-input cursor-pointer\" id=minChecked_4> <label for=minChecked_4 class=\"form-check-label cursor-pointer\">Orange</label> </div> <small @if=\"validatorsForm.get('minChecked').touched || validatorsForm.get('minChecked').hasErrors()\"> <span class=font-weight-bold>form.get('fruits').errors</span>: {{JSON.stringify(validatorsForm.get('minChecked').errors)}} </small> </form> </section> </div> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0 pb-2\"> <code><span class=font-weight-regular>Validators.</span><strong>maxChecked</strong></code> </h5> <p> <strong>{{getText('VALIDATORS.DESCRIPTION')}}</strong> {{getText('VALIDATORS.MAX_CHECKED.TEXT')}} </p> <p> <strong>{{getText('VALIDATORS.EXAMPLE')}}</strong> </p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    fruits: { value: [], validators: [Validators.maxChecked(3)] }\n});\n                </code>\n            </pre> <div class=\"browser-template mb-5\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/form-example</span> </div> </header> <section> <form [form]=validatorsForm> <div class=\"form-group form-check mb-1\" [style]=\"{ 'max-width': '200px' }\"> <input type=checkbox form-field-name=maxChecked value=banana class=\"form-check-input cursor-pointer\" id=maxChecked_1> <label for=maxChecked_1 class=\"form-check-label cursor-pointer\">Banana</label> </div> <div class=\"form-group form-check mb-1\" [style]=\"{ 'max-width': '200px' }\"> <input type=checkbox form-field-name=maxChecked value=pear class=\"form-check-input cursor-pointer\" id=maxChecked_2> <label for=maxChecked_2 class=\"form-check-label cursor-pointer\">Pear</label> </div> <div class=\"form-group form-check mb-1\" [style]=\"{ 'max-width': '200px' }\"> <input type=checkbox form-field-name=maxChecked value=kiwi class=\"form-check-input cursor-pointer\" id=maxChecked_3> <label for=maxChecked_3 class=\"form-check-label cursor-pointer\">Kiwi</label> </div> <div class=\"form-group form-check mb-1\" [style]=\"{ 'max-width': '200px' }\"> <input type=checkbox form-field-name=maxChecked value=orange class=\"form-check-input cursor-pointer\" id=maxChecked_4> <label for=maxChecked_4 class=\"form-check-label cursor-pointer\">Orange</label> </div> <small @if=\"validatorsForm.get('maxChecked').touched || validatorsForm.get('maxChecked').hasErrors()\"> <span class=font-weight-bold>form.get('fruits').errors</span>: {{JSON.stringify(validatorsForm.get('maxChecked').errors)}} </small> </form> </section> </div> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0 pb-2\"> <code><span class=font-weight-regular>Validators.</span><strong>email</strong></code> </h5> <p> <strong>{{getText('VALIDATORS.DESCRIPTION')}}</strong> {{getText('VALIDATORS.EMAIL.TEXT')}} </p> <p> <strong>{{getText('VALIDATORS.EXAMPLE')}}</strong> </p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    contactEmail: { value: '', validators: [Validators.email] }\n});\n                </code>\n            </pre> <div class=\"browser-template mb-5\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/form-example</span> </div> </header> <section> <form [form]=validatorsForm> <div class=\"form-group mb-2\" [style]=\"{ 'max-width': '220px' }\"> <small>E-mail</small> <input class=form-control [class]=\"{ 'is-invalid': validatorsForm.get('email').hasErrors() }\" form-field-name=email type=text /> </div> <small @if=\"validatorsForm.get('email').touched || validatorsForm.get('email').hasErrors()\"> <span class=font-weight-bold>form.get('contactEmail').errors</span>: {{JSON.stringify(validatorsForm.get('email').errors)}} </small> </form> </section> </div> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0 pb-2\"> <code><span class=font-weight-regular>Validators.</span><strong>pattern</strong></code> </h5> <p> <strong>{{getText('VALIDATORS.DESCRIPTION')}}</strong> {{getText('VALIDATORS.PATTERN.TEXT')}} </p> <p> <strong>{{getText('VALIDATORS.EXAMPLE')}}</strong> </p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    firstName: {\n        value: '',\n        validators: [Validators.pattern('^[A-zÀ-ú\\s]*$')] // Accept only letters\n    }\n});\n                </code>\n            </pre> <div class=\"browser-template mb-5\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/form-example</span> </div> </header> <section> <form [form]=validatorsForm> <div class=\"form-group mb-2\" [style]=\"{ 'max-width': '200px' }\"> <small>Name</small> <input class=form-control [class]=\"{ 'is-invalid': validatorsForm.get('pattern').hasErrors() }\" form-field-name=pattern type=text /> </div> <small @if=\"validatorsForm.get('pattern').touched || validatorsForm.get('pattern').hasErrors()\"> <span class=font-weight-bold>form.get('firstName').errors</span>: {{JSON.stringify(validatorsForm.get('pattern').errors)}} </small> </form> </section> </div> </section> </section> <section class=mb-1> <h4> <a href=#create-validator name=create-validator> {{getText('CREATE_VALIDATOR.TITLE')}} </a> </h4> <p [html]=\"getText('CREATE_VALIDATOR.TEXT')\"></p> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0\"> 01 - {{getText('CREATE_VALIDATOR.CREATE.TITLE')}} </h5> <p [html]=\"getText('CREATE_VALIDATOR.CREATE.TEXT')\"></p> <pre>\n                <code class=typescript>\nexport class CustomValidators {\n    public static formFieldEquals(fieldName: string) {\n        return (formField: FormField) => {\n            const value1 = formField?.value;\n            const value2 = formField?.parent?.get(fieldName)?.value;\n            const isEquals = (value1 && value2) ? (value1 !== value2) : false;\n            return { equals: isEquals };\n        };\n    }\n}\n                </code>\n            </pre> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0\"> 02 - {{getText('CREATE_VALIDATOR.USE.TITLE')}} </h5> <p [html]=\"getText('CREATE_VALIDATOR.USE.TEXT')\"></p> <pre>\n                <code class=typescript>\nthis.form = new Form({\n    password: {\n        value: '',\n        validators: [\n            Validators.required,\n            CustomValidators.formFieldEquals('confirmPassword')\n        ]\n    },\n    confirmPassword: {\n        value: '',\n        validators: [ Validators.required ]\n    }\n});\n                </code>\n            </pre> </section> <section class=\"mt-4 mb-1\"> <h5 class=\"border-0 mb-0\"> 03 - {{getText('CREATE_VALIDATOR.RESULT.TITLE')}} </h5> <p [html]=\"getText('CREATE_VALIDATOR.RESULT.TEXT')\"></p> <div class=\"browser-template mt-3\"> <header> <div class=header-close>fiber_manual_record</div> <div class=header-url> <span>http://localhost:8090/login</span> </div> </header> <section> <form [form]=customValidatorsForm [style]=\"{ 'max-width': '200px' }\"> <div class=form-group> <small>Password</small> <input class=form-control [class]=\"{ 'is-invalid': customValidatorsForm.get('pass').hasErrors() }\" form-field-name=pass type=password /> <p @if=\"customValidatorsForm.get('pass').hasError('required')\" class=text-danger> {{lang.get('GLOBAL.REQUIRED_FIELD')}} </p> <p @if=\"customValidatorsForm.get('pass').hasError('equals')\" class=text-danger> {{lang.get('GLOBAL.PASS_NOT_EQUALS_FIELD')}} </p> </div> <div class=form-group> <small>Confirm password</small> <input class=form-control [class]=\"{ 'is-invalid': customValidatorsForm.get('confirmPass').hasErrors() }\" form-field-name=confirmPass type=password /> <p @if=\"customValidatorsForm.get('confirmPass').hasError('required')\" class=text-danger> {{lang.get('GLOBAL.REQUIRED_FIELD')}} </p> </div> <button type=submit class=w-100> <span>ENTER</span> </button> </form> </section> </div> </section> </section> </div>"},80:function(e,r,t){}}]);