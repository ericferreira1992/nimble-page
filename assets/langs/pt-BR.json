{
    "GLOBAL": {
        "INSTALL": "Instalar",
        "RESULT": "Resultado",
        "SECONDS": "Segundos",
        "LATEST": "Última",
        "HERE": "aqui",
		"TOGGLE": "Alternar",
		"SEE_MORE": "Ver mais"
    },
    "HOME": {
        "MENU": {
            "HOME": "Início",
            "DOCUMENT": "Documentação"
        },
        "HEADER": {
            "LANGUAGES": {
                "PT_BR": "Português",
                "EN_US": "Inglês"
            },
            "SEARCH": "Procurar",
            "TITLE": "Fácil, rápido e flexível",
            "SUBTITLE": "Seu framework de UI completo para construir sites e aplicativos web com total qualidade, performance e rapidez",
            "GET_STARTED": "Iniciar agora!"
        },
        "ABOUT": {
            "WHAT_IS_NIMBLE": {
                "TITLE": "O que é Nimble?",
                "TEXT": "Nimble é um framework de UI em TypeScript voltado para o desenvolvimento de websites, mas que também consegue criar aplicações robustas com bastante facilidade. Ele não é muito diferente dos demais frameworks ou libs de UI existentes, mas se torna uma ferramenta fácil ao trabalhar \"orientado à páginas\"."
            },
            "IS_EASY": {
                "TITLE": "É fácil e prático!",
                "TEXT": "Nimble por se tratar de um framework, torna-se uma ferramente facilitadora na hora desenvolver suas págias web. Fazer sua regra de negócio comunicar com o HTML e CSS nunca será tão fácil."
            },
            "SEO_WORKS": {
                "TITLE": "SEO funciona?",
                "TEXT": "Sabemos que atualmente nenhuma lib ou framework de UI em JavaScript são recomendadas para desenvolvimento de páginas web, até mesmo porque geram um resultado grande (em KBs) e o SEO sempre é um problema, mas não por aqui."
            },
            "WHY_WAS_NIMBLE_CREATED": {
                "TITLE": "Porquê Nimble foi criado?",
                "TEXT": "Em meio às dores dos desenvolvedores web ao criar websites/páginas, sejam elas dinâmicas ou estáticas, sem uma padronização e reaproveitamento de código usando um projeto 100% client-side, o Nimble foi criado. O framework trabalha orientado à páginas, dando ao desenvolvedor a vantagem de criar estruturas de rotas ligadas às suas páginas, independente do grau de complexidade que possuirem. Por estas e outras características ao ter um projeto desenvolvido em Nimble, torna sua aplicação, página ou website totalmente escalável e performático, sem contar também na fácil manutenabilidade mesmo tendo vários desenvolvedores trabalhando no mesmo projeto."
            },
            "CAN_I_USE_THIRD_CODE": {
                "TITLE": "Posso utilizar códigos de terceiro?",
                "TEXT": "O Nimble utiliza em seu algoritmo de renderização um conceito de incremental-DOM, tornando-se viável a utilização de códigos/scripts de terceiros, mesmo em casos de manipulação dos elementos do DOM.",
                "GET_STARTED_NOW": "CRIAR UM PROJETO!"
            }
        }
    },
    "DOC": {
        "1x": {
            "MENU": {
                "ESSENTIALS": {
                    "TEXT": "Essenciais",
                    "INTRODUCTION": {
                        "TEXT": "Introdução",
                        "WHAT_IS_THE_NIMBLE": { "TEXT": "O que é o Nimble?" },
                        "FIRST_STEPS": { "TEXT": "Primeiros passos" },
                        "RENDERING_A_SIMPLE_PAGE": { "TEXT": "Renderizando uma página" },
                        "DECLARATIVE_RENDER": { "TEXT": "Renderização declarativa" },
                        "NOTIFICATION_TO_RERENDER": { "TEXT": "Atualizar a página" },
                        "CONDITION_AND_LOOPS": { "TEXT": "Condições e laços" },
                        "HIDE_AND_SHOW_ELEMENTS": { "TEXT": "Exibindo ou escondendo elementos" },
                        "SHOW_LIST_ELEMENTS": { "TEXT": "Exibindo lista de elementos" }
                    },
                    "GET_STARTED": {
                        "TEXT": "Começar a usar",
                        "INSTALL_CLI": { "TEXT": "Instalar a CLI" },
                        "CREATE_A_PROJECT": { "TEXT": "Criar um projeto" }
                    },
                    "STRUCTURE": {
                        "TEXT": "Estrutura do framework",
                        "FOLDER_ARCHIVES_STRUCTURE": { "TEXT": "Pastas e arquivos" },
                        "ROOT_FILES": { "TEXT": "Arquivos da raíz" },
                        "PUBLIC_DIRECTORY": { "TEXT": "Diretório \"public\"" },
                        "SOURCE_DIRECTORY": { "TEXT": "Diretório \"src\"" },
                        "APP_DIRECTORY": { "TEXT": "Diretório \"src/app\"" },
                        "ENVIRONMENTS_DIRECTORY": { "TEXT": "Diretório \"src/environments\"" },
                        "SCSS_DIRECTORY": { "TEXT": "Diretório \"src/scss\"" }
                    }
                },
                "FRAMEWORK": {
                    "TEXT": "Framework",
                    "PAGES": {
                        "TEXT": "Páginas"
                    },
                    "DIALOGS": {
                        "TEXT": "Diálogs (Modal)"
                    },
                    "SERVICES": {
                        "TEXT": "Serviços (Services)"
                    },
                    "DIRECTIVES": {
                        "TEXT": "Diretivas"
                    }
                },
                "CLI": {
                    "TEXT": "CLI (Command Line Interface)",
                    "OVERVIEW": { "TEXT": "Visão geral" },
                    "INTERACTIVE_COMMANDS": {
						"TEXT": "Comandos interativos",
                        "GENERATE": {
							"TEXT": "Generate",
							"PAGE": { "TEXT": "Página" },
							"DIALOG": { "TEXT": "Diálogo (Modal)" },
							"DIRECTIVE": { "TEXT": "Diretiva" },
							"SERVICE": { "TEXT": "Serviço (Service)" }
						},
						"SERVER": { "TEXT": "Server" },
                        "BUILD": { "TEXT": "Build" }
					},
                    "ARGS": {
						"TEXT": "Comandos via argumentos",
                        "SERVER": { "TEXT": "nb server" },
                        "BUILD": { "TEXT": "nb build" }
					}
                }
            },
            "CONTENT": {
				"ESSENTIALS": {
					"INTRODUCTION": {
						"TITLE": "Introdução",
						"WHAT_IS_NIMBLE": {
							"TITLE": "O que é o Nimble?",
							"TEXT_1": "Nimble é um framework de UI em TypeScript voltado para o desenvolvimento de websites, mas que também consegue criar aplicações robustas com bastante facilidade. Ele não é muito diferente dos demais frameworks ou libs de UI existentes, mas se torna uma ferramenta fácil ao trabalhar \"orientado à páginas\". É importante lembrar que apesar do Nimble resolver o problema do SEO, ele trabalha como uma SPA (Single Page Application).",
							"TEXT_2": "Nimble pode ser considerado um framework onde o desenvolvimento é orientado a rotas e páginas, pois conforme a imagem abaixo é possível ver um exemplo de como é possível \"montar\" uma estrutura de rotas com suas respectivas páginas. Outro ponto a observar é a primeira página com o caminho da rota definida como vazia (path: \"\"), tendo as demais páginas como \"filhas\" dela, isso significa que todas herdarão o conteudo da página \"pai\".",
							"TEXT_3": "Neste exemplo, o site terá as seguintes rotas: \"home\", \"about\", \"contact\", \"admin/login\", \"admin/dashbord\"."
						},
						"FIRST_STEPS": {
							"TITLE": "Primeiros passos",
							"TEXT": "Como o Nimble é um framework, você precisará instalar sua CLI e posteriormente criar um projeto. Portanto, os exemplos a seguir considerará um projeto já criado.",
							"RENDERING_A_SIMPLE_PAGE": {
								"TITLE": "Renderizando uma página simples",
								"TEXT_01": "Primeiramente, criaremos uma página com ajuda da CLI. Execute no terminal <code>nb</code>, aguarde as opções aparecerem e em seguida selecione <code>Generate</code>, depois <code>Page</code> e por fim digite o caminho da página. Feito isso, terá algo parecido com o exemplo abaixo:",
								"TEXT_02": "Definiremos uma rota para a página no arquivo de rotas localizado em <code>src/app/routes.ts</code>:",
								"TEXT_03": "Definindo o template (HTML):",
								"TEXT_04": "Definindo o estilo (CSS):",
								"TEXT_05": "No código (Script) da página, neste caso, não será preciso mexer, deixaremos como foi criado:",
								"TEXT_05_01": "Para ver como ficou, executaremos o <code>nb serve</code> no terminal para incializar um servidor de desenvolvimento:",
								"TEXT_05_02": "Abrindo o navegador no endereço <code>http://localhost:8090/my-first</code>, teremos o resultado abaixo:",
								"TEXT_05_02_HTML_RESULT": "Minha primeira página em <span style=\"color: purple\">Nimble</span> :)"
							}
						},
						"DECLARATIVE_RENDER": {
							"TITLE": "Renderização declarativa",
							"TEXT": "O Nimble permite renderizar dados no DOM (Document Object Model) usando sintaxes muito fáceis, possibilitando customizar de forma dinâmica as páginas desde textos até priedades dos elementos, veja os exemplos abaixo",
							"USING_INTERPOLATION_TO_PRINT": {
								"TITLE": "Usando interpolação para escrever:",
								"TEXT_01": "Definindo uma propriedade nova na classe da página:",
								"TEXT_02": "Preparando o template para renderizar nosso texto dinâmico:",
								"TEXT_03": "Resultado:"
							},
							"NOTIFICATION_TO_RERENDER": {
								"TITLE": "Atualizando a página com novas informações",
								"TEXT_01_1": "Para que as alterações de código de uma página sejam refletidas diretamente na página (após ela ter sido renderizada), é necessário dizer ao framework de que ela deve ser atualizada, simplesmente invocando o método <code>this.render()</code>.",
								"TEXT_01_2": "⚠️ <strong>Importante</strong>: o Nimble utiliza um algoritmo bem eficiente para saber exatamente o que foi modificado e atualizar de forma pontual, tornando isto o mais performático possível.",
								"TEXT_02": "Definindo na classe da página uma propriedade chamada <code>seconds</code> para ser o temporizador, onde esta terá seu valor incrementado com +1 a cada segundo e que em seguida solicitará que a página seja atualizada para mostrar o valor:",
								"TEXT_03": "Colocando no template a propriedade deverá ser renderizada:",
								"TEXT_04_1": "Resultado:",
								"TEXT_04_2": "Já fazem",
								"TEXT_04_3": "segundos que esta página foi renderizada."
							}
						},
						"CONDITION_AND_LOOPS": {
							"TITLE": "Condições e laços de iteração",
							"TEXT": "Fácilmente é possível determinar se tal elemento será incluído ou não na sua página, além de poder realizar estruturas de repetições. Para isto usamos diretivas de iterações nativas presentes no framework, veja os exemplos a seguir.",
							"IF_DIRECTIVE": {
								"TITLE": "Exibindo ou escondendo elementos",
								"TEXT_01": "Com a diretiva nativa <code>@if</code>, espera que seja passada à ela uma lógica que retorna um booleano.",
								"TEXT_02": "Criando nova propriedade <code>show</code> para guardar o valor booleano:",
								"TEXT_03_1": "Aplicando a diretiva em dois elementos diferentes do template. No primeiro foi passado o valor real, no segundo foi passado o mesmo valor porem negado:",
								"TEXT_03_2": "Texto 01 exibido :)",
								"TEXT_03_3": "Texto 02 exibido :D",
								"TEXT_04": "Resultado:"
							},
							"FOR_DIRECTIVE": {
								"TITLE": "Exibindo lista de elementos",
								"TEXT_01": "Com a diretiva nativa <code>@for</code>, é possível reaproveitar um mesmo elemento para exibir cada item de uma lista.",
								"TEXT_02": "Criando nova propriedade <code>menuItems</code> para guardar uma lista de dados:",
								"TEXT_03_1": "Esta diretiva possui uma instrução específica para que funcione corretamente, <code>@for=\"item of list\"</code>, muito similar à um <code>for</code> utilizado em um código JavaScript ou TypeScript:",
								"TEXT_04": "Resultado:"
							}
						}
					},
					"GET_STARTED": {
						"TITLE": "Get started",
						"INSTALL_CLI": {
							"TITLE": "Instalar a CLI",
							"TEXT_1": "Nimble possui uma CLI (Command Line Interface) essencial para que tudo funcione perfeitamente. Com ele é possível fazer desde a criação de um novo projeto até a criação de páginas. Veja a documentação completa dele clicando",
							"TEXT_2": "Para instala-la globalmente, execute em seu terminal a linha abaixo:",
							"TEXT_3": "⚠️ Problemas ao instalar? Veja mais detalhes"
						},
						"CREATE_A_PROJECT": {
							"TITLE": "Criar um projeto",
							"TEXT_1": "<strong>01</strong> - Run in your terminal:",
							"TEXT_2": "<strong>02</strong> - Ele lhe perguntará se quer criar um projeto Nimble:",
							"TEXT_3": "<strong>03</strong> - Então, coloque o nome do seu projeto e confirme:",
							"TEXT_4": "<strong>04</strong> - Pronto, um diretório com o nome dado será criado com uma estrutura de pastas como esta abaixo:",
							"TEXT_4_1": "⚠️ Entenda toda a estrutura do projeto clicando",
							"TEXT_5": "<strong>05</strong> - Agora, basta pedir para a CLI do Nimble iniciar um servidor de desenvolvimento para ver o site rodando, execute a linha abaixo:",
							"TEXT_5_1": "⚠️ Saiba mais sobre a Nimble CLI clicando"
						}
					},
					"STRUCTURE": {
						"TITLE": "Estrutura do framework",
						"FOLDER_ARCHIVES_STRUCTURE": {
							"TITLE": "Pastas e arquivos",
							"TEXT": "Como Nimble é um framework, ao criar um projeto via CLI é criado uma página de exemplo com uma estrutura de pastas e arquivos muito parecido com esta:",
							"ROOT_FILES": {
								"TITLE": "Arquivos da raíz do projeto",
								"TEXT_1": "Os arquivos <code>nimble.json</code>, <code>package.json</code> e <code>tsconfig.json</code> são essenciais para o projeto, leia abaixo:",
								"TEXT_2": "<code>• nimble.json</code> arquivo que define se é um projeto Nimble, por isso é um arquivo obrigatório. Nele, contem diversas definições e configurações de funcionamento do projeto. Uma das grandes funcionalidades deste arquivo, é inserir o caminho de arquivos JS/TS ou CSS/SCSS para serem inseridos no projeto automaticamente, como por exemplo: \"node_modules/bootstrap/dist/css/bootstrap.css\".",
								"TEXT_3": "<code>• package.json</code> é aonde ficam centralizadas as dependências que o seu projeto utiliza. Cada uma das dependências possuem sua versão, e elas podem conter conteúdos desde códigos em JavaScript/TypeScript até Styles (css ou scss). Por exemplo, a dependência principal do Nimble, chamada \"@nimble-ts/core\", é uma delas que está presente neste arquivo, já que ela é necessária para o funcionamento do seu projeto.",
								"TEXT_4": "<code>• tsconfig.json</code> quando este arquivo está presente, significa que o projeto utiliza TypeScript (que é o caso do Nimble), e o conteúdo deste arquivo especifica os arquivos raiz e as opções e configurações necessárias para compilar o projeto."
							},
							"PUBLIC_DIRECTORY": {
								"TITLE": "Diretório <code>public</code>",
								"TEXT": "O diretório <code>public</code> é onde ficará tudo o que se refere a sua página quando estiver publicada ou após estar \"rodando\" em sua máquina durante seu desenvolvimento. Isso inclui o <strong>index.html</strong> e quaisquer outros arquivos físicos que sua página precise ter, como: icones, imagens, fonts, arquivos css ou js de terceiros.<br/><br/>É importante ressaltar que se houver arquivos css e js contidos neste diretório, eles só poderão ser utilizados/referenciados no <code>index.html</code>, pois para outros vindos de dependências, como <code>node_modules</code>, devem ser utilizados/referenciados em <code>src/configuration.json</code> que será abordado mais abaixo.<br/><br/>⚠️ <strong>Importante:</strong> o arquivo <code>index.html</code> é o único que é obrigatório neste diretório."
							},
							"SOURCE_DIRECTORY": {
								"TITLE": "Diretório <code>src</code>",
								"TEXT_1": "O diretório <code>src</code> é o \"coração\" de todo o desenvolvimento do projeto. É nele que fica toda a implementação, do HTML ao código TypeScript. Como visto na estrutura de diretórios acima, dentro deste existem alguns outros diretório, que serão abordados e tópicos a seguir, mas agora vamos abordar os arquivos que estão na raíz deste diretório e saber para que servem:",
								"TEXT_2": "<code>• index.ts</code> arquivo em TypeScript responsável por não só inicializar o projeto em Nimble, mas também informar diversas dependencias do projeto, tais como: rotas, providers, diretivas e outros.",
								"TEXT_3": "<code>• style.scss</code> onde é centralizado todos os arquivos scss (exceto das <i>pages</i>, que será abordado em seguida) contidos dentro do diretório <code>src/scss</code>, que será abordado nos próximos tópicos."
							},
							"APP_DIRECTORY": {
								"TITLE": "Diretório <code>src/app</code>",
								"TEXT_1": "Este diretório concentra todas as páginas, <i>providers</i>, diretivas e também o arquivo de rotas, veja de detalhadamento sobre os dois abaixo:",
								"TEXT_2": "<code>• pages</code> diretório onde as páginas devem ser centralizadas, como visto na estrutura apresentada acima,.",
								"TEXT_3": "<code>• routes.ts</code> arquivo em TypeScript, obrigatório, para informar as rotas das páginas do seu site/aplicação."
							},
							"ENVIRONMENTS_DIRECTORY": {
								"TITLE": "Diretório <code>src/environments</code>",
								"TEXT": "Arquivos que podem conter informações para serem embarcados no projeto ao executa-lo ou em um processo de <i>build</i>. Estes arquivos devem sempre manter o seguinte padrão: <code>env.NAME.ts</code>, onde <strong>NAME</strong> é o nome específicado da sua <i>environment</i>. Inicialmente, após criar um projeto Nimble, vêm com estes três arquivos citados acima, para usar no projeto."
							},
							"SCSS_DIRECTORY": {
								"TITLE": "Diretório source (<code>src/scss</code>)",
								"TEXT_1": "O diretório <code>src/scss</code> é um diretório criado pelo Nimble para centralizar os arquivos de estilo separadamente para serem importados no <code>style.scss</code> (como visto anteriormente) ou em páginas caso possuam recursos a serem compartilhados. Neste projeto exemplo, existem dois arquivos sass:",
								"TEXT_2": "<code>• reset.scss</code> geralmente usado para definir estilos padrões para tags HTML como: body, p, h1 e etc.",
								"TEXT_3": "<code>• variables.scss</code> variáveis que são interpretedas pelo sass, e que podem ser usadas desde qune sejam importadas. Nele, por exemplo, é possível criar uma variável para guardar uma cor, e ser replicada em todos as páginas do seu site."
							}
						}
					}	
				},
				"CLI": {
					"OVERVIEW" : {
						"TITLE": "Visão geral",
						"WHAT_IS_CLI": {
							"TITLE": "O que é Nimble CLI?",
							"TEXT_1": "CLI significa Interface de Linha de Comando, basicamente é uma forma simples e interativa de se comunicar com algum recurso através de comandos. No caso do Nimble Framework, ele possui sua própria CLI, para que você possa criar um novo projeto, executa-lo e até mesmo criar recursos para o projeto (páginas, services e outros), tornando o uso dela essencial para poder trabalhar, já que ela encapsula diversas complexidades para o desenvolvedor, o que deixa tudo mais simples e claro."
						},
						"HOW_INSTALL": {
							"TITLE": "Como instalar?",
							"TEXT_1": "Para instala-la é muito fácil, mas antes você precisa atender a um requisito mínimo.",
							"MINIMUM_REQUIREMENT": {
								"TITLE": "01 - NodeJS",
								"TEXT_1": "O único pré requisito para poder instalar a Nimble CLI é ter a versão mais recente do NodeJS instalado em seu computador. Caso você já tenha o NodeJS instaldo ignore, caso não tenha clique no link abaixo para baixar:",
								"TEXT_2": "Baixar NodeJS"
							},
							"EXECUTE_CMD_LINE": {
								"TITLE": "02 - Executando o comando",
								"TEXT_1": "Agora com o NodeJS instalado, teremos acesso ao <code>npm</code>, que serve para gerenciar bibliotecas Javascript, que é o caso do Nimble CLI. Com o seu terminal aberto, você irá executar nele a linha que está logo abaixo, que significa que a CLI será instalada globalmente em seu computador, para que ela possa ser utiliza-lao a qualquer momento. <br/><small class=\"font-weight-light\"><i>❗️A instalação poderá demorar alguns minutos conforme a velocidade da sua internet</i></small>"
							},
							"CREATING_PROJECT": {
								"TITLE": "03 - Criando um projeto com a CLI",
								"TEXT_1": "Ver como"
							}
						}
					},
					"INTERACTIVE_COMMANDS" : {
						"TITLE": "Comandos interativos",
						"TEXT_1": "Assim como toda CLI, a Nimble CLI também possui seu <i>alias</i> para usa-lo globalmente, que é <code>nb</code>. Praticamente todos os comandos e funcionalidades estão no modo interátivo dela, basta escrever em seu terminal apenas <code>nb</code>, dar ENTER e as opções aparacerão, simples assim:",
						"TEXT_2": "Veja abaixo, de forma detalhada, todas as funcionalidades e comandos.",
                        "GENERATE": {
							"TITLE": "Generate",
							"TEXT_1": "O <code>Generate</code> é uma opção que permite gerar scripts e códigos de forma simplificada para cada finalidade, seja ao criar uma nova página, um novo diálogo, uma diretiva ou até mesmo uma classe de serviço injetável.",
							"TEXT_2": "Após executar <code>nb</code> em seu terminal, será exibida as opções. A opção <code>Generate</code> é a qual será abordada, como mostrado abaixo:",
							"TEXT_3": "Ao selecionar a opção <code>Generate</code> e apertar a tecla <i>Enter</i>, apareça as opções abaixo, estas serão abordadas nos tópicos abaixo.",
							"PAGE": {
								"TITLE": "Page",
								"TEXT_1": "A opção <code>Generate > Page</code> permite criar uma estrutura pronta para uma nova página, única coisa que deverá ser feito após isto, é definir uma rota no esquema de rotas e referencia-la.",
								"TEXT_2": "Ao selecionar a opção <code>Page</code> e confirmar, será solicitado que digite o caminho aonde a página será criada (veja que possui um exemplo):",
								"TEXT_3": "Após informar o nome da página, a CLI criará todos arquivos de template, script e estilo:"
							},
							"DIALOG": {
								"TITLE": "Diálogo (Modal)",
								"TEXT_1": "A opção <code>Generate > Dialog</code> permite criar uma estrutura pronta para um novo diálogo (modal).",
								"TEXT_2": "Ao selecionar a opção <code>Dialog</code> e confirmar, será solicitado que digite o caminho aonde o diálogo será criado (veja que possui um exemplo):",
								"TEXT_3": "Após informar o nome do diálogo, a CLI criará todos arquivos de template, script e estilo:"
							},
							"DIRECTIVE": {
								"TITLE": "Diretiva",
								"TEXT_1": "A opção <code>Generate > Directive</code> permite criar uma estrutura pronta para uma nova diretiva.",
								"TEXT_2": "Ao selecionar a opção <code>Directive</code> e confirmar, será solicitado que digite o caminho aonde a diretiva será criada (veja que possui um exemplo):",
								"TEXT_3": "Após informar o nome da diretiva, a CLI criará o arquivo:"
							},
							"SERVICE": {
								"TITLE": "Serviço (Service)",
								"TEXT_1": "A opção <code>Generate > Service</code> permite criar uma estrutura pronta para uma nova classe de serviço.",
								"TEXT_2": "Ao selecionar a opção <code>Service</code> e confirmar, será solicitado que digite o caminho aonde a classe será criada (veja que possui um exemplo):",
								"TEXT_3": "Após informar o nome da classe, a CLI criará o arquivo:"
							}
						},
                        "SERVER": {
							"TITLE": "Server",
							"TEXT_1": "O <code>Run server</code> é a opção que permite você \"rodar\" o Nimble em um simples servidor em NodeJs durante o desenvolvimento.",
							"TEXT_2": "Após confirmar a opção, o servidor de desenvolvimento mostrará algumas informações, pedirá para esperar um pouco e pronto! É só acessar este endereço <a href=\"http://localhost:8090\" target=\"_blank\">http://localhost:8090</a> em seu navegador e verá seu site ou aplicação funcionando."
						},
                        "BUILD": {
							"TITLE": "Build",
							"TEXT_1": "O <code>Run build</code> é a opção que permite você \"gerar\" (compilar) seu projeto Nimble para poder publica-lo, pois o projeto Nimble não é nativamente compatível com todos os navegadores, portanto a CLI vai gerar um código mais leve e com uma série de otimizações como minificão e ofuscação de códigos/scripts, remoção de comentários, atualização dos cashs de toda a aplicação entre outros, tudo para que ela rode com a maior performance possível após a publicação.",
							"TEXT_2": "Após confirmar a opção, a CLI solicitará que escolha uma ENV, dentre as disponíveis no projeto, para ser usada durante o <i>build</i>.",
							"TEXT_3": "Com a ENV selecionada, o build será iniciado em seguida. O tempo de build geralmente não demora nem 1 minuto, e o tempo dele é relativo ao tamanho do projeto.",
							"TEXT_4": "Build terminado com sucesso, a pasta \"build\" terá sido criada na raiz do projeto."
						}
					},
					"ARGS" : {
						"TITLE": "Comandos via argumentos",
						"TEXT_1": "Assim como toda CLI, a Nimble CLI também possui seu <i>alias</i> para usa-lo globalmente, que é <code>nb</code>. Praticamente todos os comandos e funcionalidades estão no modo interátivo dela, basta escrever em seu terminal apenas <code>nb</code>, dar ENTER e as opções aparacerão, simples assim:",
						"TEXT_2": "Veja abaixo, de forma detalhada, todas as funcionalidades e comandos.",
                        "SERVER": {
							"TITLE": "nb server",
							"TEXT_1": "O comando <code>nb server</code> ou <code>nb s</code> é a opção que permite você \"rodar\" o Nimble em um simples servidor em NodeJs durante o desenvolvimento.",
							"TEXT_2": "Após executar o comando em seu terminal, o servidor de desenvolvimento exibirá algumas informações, pedirá que aguarde um pouco e pronto! É só acessar este endereço <a href=\"http://localhost:8090\" target=\"_blank\">http://localhost:8090</a> em seu navegador e verá seu site ou aplicação funcionando."
						},
                        "BUILD": {
							"TITLE": "nb build",
							"TEXT_1": "O comando <code>nb build</code> ou <code>nb b</code> é a opção que permite você \"gerar\" (compilar) seu projeto Nimble para poder publica-lo, pois o projeto Nimble não é nativamente compatível com todos os navegadores, portanto a CLI vai gerar um código mais leve e com uma série de otimizações como minificão e ofuscação de códigos/scripts, remoção de comentários, atualização dos cashs de toda a aplicação entre outros, tudo para que ela rode com a maior performance possível após a publicação.",
							"TEXT_2": "Após executar o comando em seu terminal, o build será iniciado em seguida. O tempo de build geralmente não demora nem 1 minuto, e o tempo dele é relativo ao tamanho do projeto.",
							"TEXT_3": "Build terminado com sucesso, a pasta \"build\" terá sido criada na raiz do projeto."
						}
					}
				},
				"FRAMEWORK": {
					"PAGES": {
                        "TITLE": "Páginas"
                    },
                    "DIALOGS": {
                        "TITLE": "Diálogs (Modal)"
                    },
                    "SERVICES": {
                        "TITLE": "Serviços (Services)"
                    },
                    "DIRECTIVES": {
                        "TITLE": "Diretivas"
                    }
				}
            }
        }
    }
}